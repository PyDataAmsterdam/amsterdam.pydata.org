{"version":3,"file":"validate.js","names":["getGatsbyUpgradeVersion","entries","reduce","version","entry","api","semver","gt","getBadExports","plugin","pluginAPIKeys","apis","badExports","concat","map","e","exportName","pluginName","name","pluginVersion","getErrorContext","exportType","currentAPIs","latestAPIs","ex","gatsbyUpgradeVersion","errors","fixes","forEach","similarities","stringSimilarity","findBestMatch","isDefaultPlugin","message","push","bestMatch","rating","target","sourceMessage","length","filter","Boolean","join","handleBadExports","hasBadExports","Object","keys","find","getLatestAPIs","badItem","context","reporter","error","id","addModuleImportAndValidateOptions","rootDir","incErrors","value","modulePath","importedModule","maybeAddFileProtocol","pluginModule","preferDefault","module","subErrors","plugins","subPlugins","validatePluginsOptions","newPlugins","Promise","all","gatsbyNode","resolvedPlugin","resolvePlugin","importGatsbyPlugin","err","pluginOptionsSchema","subPluginPaths","Set","optionsSchema","Joi","extend","joi","type","base","array","items","alternatives","string","object","resolve","options","unknown","custom","arrayValue","helpers","schema","_flags","require","normalizedPath","state","path","key","index","Array","isArray","ancestors","Error","add","console","log","default","external","inc","args","$_setFlag","clone","configDir","parentDir","relative","isSchema","warn","describe","append","warning","validateOptionsSchema","validationWarnings","details","stripIndent","trackCli","valueString","has","size","from","ValidationError","validationErrors","validateConfigPluginsOptions","config","process","exit","collatePluginAPIs","flattenedPlugins","node","browser","ssr","nodeAPIs","browserAPIs","ssrAPIs","pluginNodeExports","resolveModuleExports","resolvedCompiledGatsbyNode","mode","pluginBrowserExports","pluginSSRExports","handleMultipleReplaceRenderers","rendererPlugins","includes","env","NODE_ENV","ignorable","slice","messages","fp","i","skipSSR","m","warnOnIncompatiblePeerDependency","packageJSON","gatsbyPeerDependency","isWorker","satisfies","gatsbyVersion","includePrerelease"],"sources":["../../../src/bootstrap/load-plugins/validate.ts"],"sourcesContent":["import _ from \"lodash\"\nimport path from \"path\"\nimport * as semver from \"semver\"\nimport * as stringSimilarity from \"string-similarity\"\nimport { version as gatsbyVersion } from \"gatsby/package.json\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { validateOptionsSchema, Joi } from \"gatsby-plugin-utils\"\nimport { IPluginRefObject } from \"gatsby-plugin-utils/dist/types\"\nimport { stripIndent } from \"common-tags\"\nimport { trackCli } from \"gatsby-telemetry\"\nimport { isWorker } from \"gatsby-worker\"\nimport { resolveModuleExports } from \"../resolve-module-exports\"\nimport { getLatestAPIs } from \"../../utils/get-latest-gatsby-files\"\nimport { GatsbyNode, PackageJson } from \"../../../\"\nimport {\n  IPluginInfo,\n  IFlattenedPlugin,\n  IPluginInfoOptions,\n  ISiteConfig,\n} from \"./types\"\nimport { resolvePlugin } from \"./resolve-plugin\"\nimport { preferDefault } from \"../prefer-default\"\nimport { importGatsbyPlugin } from \"../../utils/import-gatsby-plugin\"\nimport { maybeAddFileProtocol } from \"../resolve-js-file-path\"\n\ninterface IApi {\n  version?: string\n}\n\nexport interface IEntry {\n  exportName: string\n  pluginName: string\n  pluginVersion: string\n  api?: IApi\n}\n\nexport type ExportType = \"node\" | \"browser\" | \"ssr\"\n\ntype IEntryMap = {\n  [exportType in ExportType]: Array<IEntry>\n}\n\nexport type ICurrentAPIs = {\n  [exportType in ExportType]: Array<string>\n}\n\nconst getGatsbyUpgradeVersion = (entries: ReadonlyArray<IEntry>): string =>\n  entries.reduce((version, entry) => {\n    if (entry.api && entry.api.version) {\n      return semver.gt(entry.api.version, version || `0.0.0`)\n        ? entry.api.version\n        : version\n    }\n    return version\n  }, ``)\n\n// Given a plugin object, an array of the API names it exports and an\n// array of valid API names, return an array of invalid API exports.\nfunction getBadExports(\n  plugin: IPluginInfo,\n  pluginAPIKeys: ReadonlyArray<string>,\n  apis: ReadonlyArray<string>\n): Array<IEntry> {\n  let badExports: Array<IEntry> = []\n  // Discover any exports from plugins which are not \"known\"\n  badExports = badExports.concat(\n    _.difference(pluginAPIKeys, apis).map(e => {\n      return {\n        exportName: e,\n        pluginName: plugin.name,\n        pluginVersion: plugin.version,\n      }\n    })\n  )\n  return badExports\n}\n\nfunction getErrorContext(\n  badExports: Array<IEntry>,\n  exportType: ExportType,\n  currentAPIs: ICurrentAPIs,\n  latestAPIs: { [exportType in ExportType]: { [exportName: string]: IApi } }\n): {\n  errors: Array<string>\n  entries: Array<IEntry>\n  exportType: ExportType\n  fixes: Array<string>\n  sourceMessage: string\n} {\n  const entries = badExports.map(ex => {\n    return {\n      ...ex,\n      api: latestAPIs[exportType][ex.exportName],\n    }\n  })\n\n  const gatsbyUpgradeVersion = getGatsbyUpgradeVersion(entries)\n  const errors: Array<string> = []\n  const fixes = gatsbyUpgradeVersion\n    ? [`npm install gatsby@^${gatsbyUpgradeVersion}`]\n    : []\n\n  entries.forEach(entry => {\n    const similarities = stringSimilarity.findBestMatch(\n      entry.exportName,\n      currentAPIs[exportType]\n    )\n    const isDefaultPlugin = entry.pluginName == `default-site-plugin`\n\n    const message = entry.api\n      ? entry.api.version\n        ? `was introduced in gatsby@${entry.api.version}`\n        : `is not available in your version of Gatsby`\n      : `is not a known API`\n\n    if (isDefaultPlugin) {\n      errors.push(\n        `- Your local gatsby-${exportType}.js is using the API \"${entry.exportName}\" which ${message}.`\n      )\n    } else {\n      errors.push(\n        `- The plugin ${entry.pluginName}@${entry.pluginVersion} is using the API \"${entry.exportName}\" which ${message}.`\n      )\n    }\n\n    if (similarities.bestMatch.rating > 0.5) {\n      fixes.push(\n        `Rename \"${entry.exportName}\" -> \"${similarities.bestMatch.target}\"`\n      )\n    }\n  })\n\n  return {\n    errors,\n    entries,\n    exportType,\n    fixes,\n    // note: this is a fallback if gatsby-cli is not updated with structured error\n    sourceMessage: [\n      `Your plugins must export known APIs from their gatsby-node.js.`,\n    ]\n      .concat(errors)\n      .concat(\n        fixes.length > 0\n          ? [`\\n`, `Some of the following may help fix the error(s):`, ...fixes]\n          : []\n      )\n      .filter(Boolean)\n      .join(`\\n`),\n  }\n}\n\nexport async function handleBadExports({\n  currentAPIs,\n  badExports,\n}: {\n  currentAPIs: ICurrentAPIs\n  badExports: { [api in ExportType]: Array<IEntry> }\n}): Promise<void> {\n  const hasBadExports = Object.keys(badExports).find(\n    api => badExports[api].length > 0\n  )\n  if (hasBadExports) {\n    const latestAPIs = await getLatestAPIs()\n    // Output error messages for all bad exports\n    _.toPairs(badExports).forEach(badItem => {\n      const [exportType, entries] = badItem\n      if (entries.length > 0) {\n        const context = getErrorContext(\n          entries,\n          exportType as keyof typeof badExports,\n          currentAPIs,\n          latestAPIs\n        )\n        reporter.error({\n          id: `11329`,\n          context,\n        })\n      }\n    })\n  }\n}\n\nconst addModuleImportAndValidateOptions =\n  (rootDir: string, incErrors: (inc: number) => void) =>\n  async (value: Array<IPluginRefObject>): Promise<Array<IPluginRefObject>> => {\n    for (const plugin of value) {\n      if (plugin.modulePath) {\n        const importedModule = await import(\n          maybeAddFileProtocol(plugin.modulePath)\n        )\n        const pluginModule = preferDefault(importedModule)\n        plugin.module = pluginModule\n      }\n    }\n\n    const { errors: subErrors, plugins: subPlugins } =\n      await validatePluginsOptions(value as Array<IPluginRefObject>, rootDir)\n\n    incErrors(subErrors)\n    return subPlugins\n  }\n\nasync function validatePluginsOptions(\n  plugins: Array<IPluginRefObject>,\n  rootDir: string\n): Promise<{\n  errors: number\n  plugins: Array<IPluginRefObject>\n}> {\n  let errors = 0\n  const newPlugins = await Promise.all(\n    plugins.map(async plugin => {\n      let gatsbyNode\n      try {\n        const resolvedPlugin = resolvePlugin(plugin, rootDir)\n        gatsbyNode = await importGatsbyPlugin(resolvedPlugin, `gatsby-node`)\n      } catch (err) {\n        gatsbyNode = {}\n      }\n\n      if (!gatsbyNode.pluginOptionsSchema) return plugin\n\n      const subPluginPaths = new Set<string>()\n\n      let optionsSchema = (\n        gatsbyNode.pluginOptionsSchema as Exclude<\n          GatsbyNode[\"pluginOptionsSchema\"],\n          undefined\n        >\n      )({\n        Joi: Joi.extend(joi => {\n          return {\n            type: `subPlugins`,\n            base: joi\n              .array()\n              .items(\n                joi.alternatives(\n                  joi.string(),\n                  joi.object({\n                    resolve: Joi.string(),\n                    options: Joi.object({}).unknown(true),\n                  })\n                )\n              )\n              .custom((arrayValue, helpers) => {\n                const entry = helpers.schema._flags.entry\n                return arrayValue.map(value => {\n                  if (typeof value === `string`) {\n                    value = { resolve: value }\n                  }\n\n                  try {\n                    const resolvedPlugin = resolvePlugin(value, rootDir)\n                    const modulePath = require.resolve(\n                      `${resolvedPlugin.resolve}${entry ? `/${entry}` : ``}`\n                    )\n                    value.modulePath = modulePath\n\n                    const normalizedPath = helpers.state.path\n                      .map((key, index) => {\n                        // if subplugin is part of an array - swap concrete index key with `[]`\n                        if (\n                          typeof key === `number` &&\n                          Array.isArray(\n                            helpers.state.ancestors[\n                              helpers.state.path.length - index - 1\n                            ]\n                          )\n                        ) {\n                          if (index !== helpers.state.path.length - 1) {\n                            throw new Error(\n                              `No support for arrays not at the end of path`\n                            )\n                          }\n                          return `[]`\n                        }\n\n                        return key\n                      })\n                      .join(`.`)\n\n                    subPluginPaths.add(normalizedPath)\n                  } catch (err) {\n                    console.log(err)\n                  }\n\n                  return value\n                })\n              }, `Gatsby specific subplugin validation`)\n              .default([])\n              .external(\n                addModuleImportAndValidateOptions(\n                  rootDir,\n                  (inc: number): void => {\n                    errors += inc\n                  }\n                ),\n                `add module key to subplugin`\n              ),\n            args: (schema: any, args: any): any => {\n              if (\n                args?.entry &&\n                schema &&\n                typeof schema === `object` &&\n                schema.$_setFlag\n              ) {\n                return schema.$_setFlag(`entry`, args.entry, { clone: true })\n              }\n              return schema\n            },\n          }\n        }),\n      })\n\n      // If rootDir and plugin.parentDir are the same, i.e. if this is a plugin a user configured in their gatsby-config.js (and not a sub-theme that added it), this will be \"\"\n      // Otherwise, this will contain (and show) the relative path\n      const configDir =\n        (plugin.parentDir &&\n          rootDir &&\n          path.relative(rootDir, plugin.parentDir)) ||\n        null\n\n      if (!Joi.isSchema(optionsSchema) || optionsSchema.type !== `object`) {\n        // Validate correct usage of pluginOptionsSchema\n        reporter.warn(\n          `Plugin \"${plugin.resolve}\" has an invalid options schema so we cannot verify your configuration for it.`\n        )\n        return plugin\n      }\n\n      try {\n        if (!optionsSchema.describe().keys.plugins) {\n          // All plugins have \"plugins: []\"\" added to their options in load.ts, even if they\n          // do not have subplugins. We add plugins to the schema if it does not exist already\n          // to make sure they pass validation.\n          optionsSchema = optionsSchema.append({\n            plugins: Joi.array().length(0),\n          })\n        }\n\n        const { value, warning } = await validateOptionsSchema(\n          optionsSchema,\n          (plugin.options as IPluginInfoOptions) || {}\n        )\n\n        plugin.options = value\n\n        // Handle unknown key warnings\n        const validationWarnings = warning?.details\n\n        if (validationWarnings?.length > 0) {\n          reporter.warn(\n            stripIndent(`\n        Warning: there are unknown plugin options for \"${plugin.resolve}\"${\n              configDir ? `, configured by ${configDir}` : ``\n            }: ${validationWarnings\n              .map(error => error.path.join(`.`))\n              .join(`, `)}\n        Please open an issue at https://ghub.io/${\n          plugin.resolve\n        } if you believe this option is valid.\n      `)\n          )\n          trackCli(`UNKNOWN_PLUGIN_OPTION`, {\n            name: plugin.resolve,\n            valueString: validationWarnings\n              .map(error => error.path.join(`.`))\n              .join(`, `),\n          })\n          // We do not increment errors++ here as we do not want to process.exit if there are only warnings\n        }\n\n        // Validate subplugins if they weren't handled already\n        if (!subPluginPaths.has(`plugins`) && plugin.options?.plugins) {\n          const { errors: subErrors, plugins: subPlugins } =\n            await validatePluginsOptions(\n              plugin.options.plugins as Array<IPluginRefObject>,\n              rootDir\n            )\n          plugin.options.plugins = subPlugins\n          if (subPlugins.length > 0) {\n            subPluginPaths.add(`plugins`)\n          }\n          errors += subErrors\n        }\n        if (subPluginPaths.size > 0) {\n          plugin.subPluginPaths = Array.from(subPluginPaths)\n        }\n      } catch (error) {\n        if (error instanceof Joi.ValidationError) {\n          const validationErrors = error.details\n          if (validationErrors.length > 0) {\n            reporter.error({\n              id: `11331`,\n              context: {\n                configDir,\n                validationErrors,\n                pluginName: plugin.resolve,\n              },\n            })\n            errors++\n          }\n          return plugin\n        }\n\n        throw error\n      }\n\n      return plugin\n    })\n  )\n  return { errors, plugins: newPlugins }\n}\n\nexport async function validateConfigPluginsOptions(\n  config: ISiteConfig = {},\n  rootDir: string\n): Promise<void> {\n  if (!config.plugins) return\n\n  const { errors, plugins } = await validatePluginsOptions(\n    config.plugins,\n    rootDir\n  )\n\n  config.plugins = plugins\n\n  if (errors > 0) {\n    process.exit(1)\n  }\n}\n\n/**\n * Identify which APIs each plugin exports\n */\nexport async function collatePluginAPIs({\n  currentAPIs,\n  flattenedPlugins,\n  rootDir,\n}: {\n  currentAPIs: ICurrentAPIs\n  flattenedPlugins: Array<IPluginInfo & Partial<IFlattenedPlugin>>\n  rootDir: string\n}): Promise<{\n  flattenedPlugins: Array<IFlattenedPlugin>\n  badExports: IEntryMap\n}> {\n  // Get a list of bad exports\n  const badExports: IEntryMap = {\n    node: [],\n    browser: [],\n    ssr: [],\n  }\n\n  for (const plugin of flattenedPlugins) {\n    plugin.nodeAPIs = []\n    plugin.browserAPIs = []\n    plugin.ssrAPIs = []\n\n    // Discover which APIs this plugin implements and store an array against\n    // the plugin node itself *and* in an API to plugins map for faster lookups\n    // later.\n    const pluginNodeExports = await resolveModuleExports(\n      plugin.resolvedCompiledGatsbyNode ?? `${plugin.resolve}/gatsby-node`,\n      {\n        mode: `import`,\n        rootDir,\n      }\n    )\n    const pluginBrowserExports = await resolveModuleExports(\n      `${plugin.resolve}/gatsby-browser`,\n      {\n        rootDir,\n      }\n    )\n    const pluginSSRExports = await resolveModuleExports(\n      `${plugin.resolve}/gatsby-ssr`,\n      { rootDir }\n    )\n\n    if (pluginNodeExports.length > 0) {\n      plugin.nodeAPIs = _.intersection(pluginNodeExports, currentAPIs.node)\n      badExports.node = badExports.node.concat(\n        getBadExports(plugin, pluginNodeExports, currentAPIs.node)\n      ) // Collate any bad exports\n    }\n\n    if (pluginBrowserExports.length > 0) {\n      plugin.browserAPIs = _.intersection(\n        pluginBrowserExports,\n        currentAPIs.browser\n      )\n      badExports.browser = badExports.browser.concat(\n        getBadExports(plugin, pluginBrowserExports, currentAPIs.browser)\n      ) // Collate any bad exports\n    }\n\n    if (pluginSSRExports.length > 0) {\n      plugin.ssrAPIs = _.intersection(pluginSSRExports, currentAPIs.ssr)\n      badExports.ssr = badExports.ssr.concat(\n        getBadExports(plugin, pluginSSRExports, currentAPIs.ssr)\n      ) // Collate any bad exports\n    }\n  }\n\n  return {\n    flattenedPlugins: flattenedPlugins as Array<IFlattenedPlugin>,\n    badExports,\n  }\n}\n\nexport const handleMultipleReplaceRenderers = ({\n  flattenedPlugins,\n}: {\n  flattenedPlugins: Array<IFlattenedPlugin>\n}): Array<IFlattenedPlugin> => {\n  // multiple replaceRenderers may cause problems at build time\n  const rendererPlugins = flattenedPlugins\n    .filter(plugin => plugin.ssrAPIs.includes(`replaceRenderer`))\n    .map(plugin => plugin.name)\n  if (rendererPlugins.length > 1) {\n    if (rendererPlugins.includes(`default-site-plugin`)) {\n      reporter.warn(`replaceRenderer API found in these plugins:`)\n      reporter.warn(rendererPlugins.join(`, `))\n      reporter.warn(\n        `This might be an error, see: https://www.gatsbyjs.com/docs/debugging-replace-renderer-api/`\n      )\n    } else {\n      console.log(``)\n      reporter.error(\n        `Gatsby's replaceRenderer API is implemented by multiple plugins:`\n      )\n      reporter.error(rendererPlugins.join(`, `))\n      reporter.error(`This will break your build`)\n      reporter.error(\n        `See: https://www.gatsbyjs.com/docs/debugging-replace-renderer-api/`\n      )\n      if (process.env.NODE_ENV === `production`) process.exit(1)\n    }\n\n    // Now update plugin list so only final replaceRenderer will run\n    const ignorable = rendererPlugins.slice(0, -1)\n\n    // For each plugin in ignorable, set a skipSSR flag to true\n    // This prevents apiRunnerSSR() from attempting to run it later\n    const messages: Array<string> = []\n    flattenedPlugins.forEach((fp, i) => {\n      if (ignorable.includes(fp.name)) {\n        messages.push(\n          `Duplicate replaceRenderer found, skipping gatsby-ssr.js for plugin: ${fp.name}`\n        )\n        flattenedPlugins[i].skipSSR = true\n      }\n    })\n    if (messages.length > 0) {\n      console.log(``)\n      messages.forEach(m => reporter.warn(m))\n      console.log(``)\n    }\n  }\n\n  return flattenedPlugins\n}\n\nexport function warnOnIncompatiblePeerDependency(\n  name: string,\n  packageJSON: PackageJson\n): void {\n  // Note: In the future the peer dependency should be enforced for all plugins.\n  const gatsbyPeerDependency = _.get(packageJSON, `peerDependencies.gatsby`)\n  if (\n    !isWorker &&\n    gatsbyPeerDependency &&\n    !semver.satisfies(gatsbyVersion, gatsbyPeerDependency, {\n      includePrerelease: true,\n    })\n  ) {\n    reporter.warn(\n      `Plugin ${name} is not compatible with your gatsby version ${gatsbyVersion} - It requires gatsby@${gatsbyPeerDependency}`\n    )\n  }\n}\n"],"mappings":"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"}