{"version":3,"file":"cache-folder-resolver.js","names":["CacheFolderResolver","isEnabled","constructor","requestsFolder","process","versions","pnp","test","env","NODE_PATH","modulesToCheck","isEverythingResolvableFromCacheDir","cacheDirReq","mod","createRequire","cacheDirDep","resolve","isEverythingResolvableFromGatsbyPackage","require","apply","resolver","target","ensureHook","getHook","tapAsync","request","resolveContext","callback","req","path","startsWith","packageMatch","exec","obj","__dirname","doResolve"],"sources":["../../../../src/utils/webpack/plugins/cache-folder-resolver.ts"],"sourcesContent":["import Resolver from \"enhanced-resolve/lib/Resolver\"\nimport mod from \"module\"\n\ninterface IRequest {\n  request?: string\n  path: string\n}\n\ntype ProcessWithPNP = NodeJS.ProcessVersions & { pnp?: string }\n\n/**\n * To support Yarn PNP and pnpm we have to make sure dependencies resolved from\n * the .cache folder should be resolved from the gatsby package directory\n * If you see error like\n *\n * ModuleNotFoundError: Module not found: Error: Can't resolve 'prop-types'\n * in '<site-directory>/.cache'\n *\n * it probably means this plugin is not enabled when it should be and there\n * might be need to adjust conditions for setting `this.isEnabled` in the\n * constructor.\n *\n * It's not enabled always because of legacy behavior and to limit potential\n * regressions. Might be good idea to enable it always in the future\n * OR remove the need for the plugin completely by not copying `cache-dir`\n * contents to `.cache` folder and instead adjust setup to use those browser/node\n * html renderer runtime files directly from gatsby package\n */\nexport class CacheFolderResolver {\n  private requestsFolder: string\n  private isEnabled = false\n\n  constructor(requestsFolder: string) {\n    this.requestsFolder = requestsFolder\n\n    if ((process.versions as ProcessWithPNP).pnp) {\n      // Yarn PnP\n      this.isEnabled = true\n    } else if (/node_modules[/\\\\]\\.pnpm/.test(process.env.NODE_PATH ?? ``)) {\n      // pnpm when executing through `pnpm` CLI\n      this.isEnabled = true\n    } else {\n      // pnpm when executing through regular `gatsby` CLI / `./node_modules/.bin/gatsby`\n      // would not set NODE_PATH, but node_modules structure would not allow to resolve\n      // gatsby deps from the cache folder (unless user would install same deps too)\n      // so we are checking if we can resolve deps from the cache folder\n      // this check is not limited to pnpm and other package managers could hit this path too\n\n      // Hardcoded list of gatsby deps used in gatsby browser and ssr runtimes\n      // instead of checking if we use Yarn PnP (via `process.versions.pnp`),\n      // we check if we can resolve the external deps from the cache-dir folder\n      // to know if we need to enable this plugin so we also cover pnpm\n      // It might be good idea to always enable it overall, but to limit potential\n      // regressions we only enable it if we are sure we need it.\n      const modulesToCheck = [\n        `prop-types`,\n        `lodash/isEqual`,\n        `mitt`,\n        `shallow-compare`,\n        `@gatsbyjs/reach-router`,\n        `gatsby-react-router-scroll`,\n        `react-server-dom-webpack`,\n        `gatsby-link`,\n      ]\n\n      // test if we can resolve deps from the cache folder\n      let isEverythingResolvableFromCacheDir = true\n      const cacheDirReq = mod.createRequire(requestsFolder)\n      for (const cacheDirDep of modulesToCheck) {\n        try {\n          cacheDirReq.resolve(cacheDirDep)\n        } catch {\n          // something is not resolvable from the cache folder, so we should not enable this plugin\n          isEverythingResolvableFromCacheDir = false\n          break\n        }\n      }\n\n      // test if we can resolve deps from the gatsby package\n      let isEverythingResolvableFromGatsbyPackage = true\n      for (const cacheDirDep of modulesToCheck) {\n        try {\n          require.resolve(cacheDirDep)\n        } catch {\n          // something is not resolvable from the gatsby package\n          isEverythingResolvableFromGatsbyPackage = false\n          break\n        }\n      }\n\n      // we only enable this plugin if we are unable to resolve cache-dir deps from .cache folder\n      // and we can resolve them from gatsby package\n      if (\n        !isEverythingResolvableFromCacheDir &&\n        isEverythingResolvableFromGatsbyPackage\n      ) {\n        this.isEnabled = true\n      }\n    }\n  }\n\n  apply(resolver: Resolver): void {\n    if (!this.isEnabled) {\n      return\n    }\n\n    const target = resolver.ensureHook(`raw-module`)\n    resolver\n      .getHook(`raw-module`)\n      .tapAsync(\n        `CacheFolderResolver`,\n        (\n          request: IRequest,\n          resolveContext: unknown,\n          callback: (err?: Error | null, result?: unknown) => void\n        ) => {\n          const req = request.request\n          if (!req) {\n            return callback()\n          }\n\n          if (!request.path.startsWith(this.requestsFolder)) {\n            return callback()\n          }\n\n          const packageMatch = /^(@[^/]+\\/)?[^/]+/.exec(req)\n          if (!packageMatch) {\n            return callback()\n          }\n\n          // We change the issuer but keep everything as is and re-run resolve\n          const obj = {\n            ...request,\n            path: __dirname,\n          }\n\n          return resolver.doResolve(\n            target,\n            obj,\n            `change issuer to gatsby package by cache-folder-resolver to fix pnp`,\n            resolveContext,\n            callback\n          )\n        }\n      )\n  }\n}\n"],"mappings":";;;;;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,mBAAmB,CAAC;EAEvBC,SAAS,GAAG,KAAK;EAEzBC,WAAW,CAACC,cAAsB,EAAE;IAAA;IAClC,IAAI,CAACA,cAAc,GAAGA,cAAc;IAEpC,IAAKC,OAAO,CAACC,QAAQ,CAAoBC,GAAG,EAAE;MAC5C;MACA,IAAI,CAACL,SAAS,GAAG,IAAI;IACvB,CAAC,MAAM,IAAI,yBAAyB,CAACM,IAAI,0BAACH,OAAO,CAACI,GAAG,CAACC,SAAS,yEAAK,EAAC,CAAC,EAAE;MACtE;MACA,IAAI,CAACR,SAAS,GAAG,IAAI;IACvB,CAAC,MAAM;MACL;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA,MAAMS,cAAc,GAAG,CACpB,YAAW,EACX,gBAAe,EACf,MAAK,EACL,iBAAgB,EAChB,wBAAuB,EACvB,4BAA2B,EAC3B,0BAAyB,EACzB,aAAY,CACd;;MAED;MACA,IAAIC,kCAAkC,GAAG,IAAI;MAC7C,MAAMC,WAAW,GAAGC,eAAG,CAACC,aAAa,CAACX,cAAc,CAAC;MACrD,KAAK,MAAMY,WAAW,IAAIL,cAAc,EAAE;QACxC,IAAI;UACFE,WAAW,CAACI,OAAO,CAACD,WAAW,CAAC;QAClC,CAAC,CAAC,MAAM;UACN;UACAJ,kCAAkC,GAAG,KAAK;UAC1C;QACF;MACF;;MAEA;MACA,IAAIM,uCAAuC,GAAG,IAAI;MAClD,KAAK,MAAMF,WAAW,IAAIL,cAAc,EAAE;QACxC,IAAI;UACFQ,OAAO,CAACF,OAAO,CAACD,WAAW,CAAC;QAC9B,CAAC,CAAC,MAAM;UACN;UACAE,uCAAuC,GAAG,KAAK;UAC/C;QACF;MACF;;MAEA;MACA;MACA,IACE,CAACN,kCAAkC,IACnCM,uCAAuC,EACvC;QACA,IAAI,CAAChB,SAAS,GAAG,IAAI;MACvB;IACF;EACF;EAEAkB,KAAK,CAACC,QAAkB,EAAQ;IAC9B,IAAI,CAAC,IAAI,CAACnB,SAAS,EAAE;MACnB;IACF;IAEA,MAAMoB,MAAM,GAAGD,QAAQ,CAACE,UAAU,CAAE,YAAW,CAAC;IAChDF,QAAQ,CACLG,OAAO,CAAE,YAAW,CAAC,CACrBC,QAAQ,CACN,qBAAoB,EACrB,CACEC,OAAiB,EACjBC,cAAuB,EACvBC,QAAwD,KACrD;MACH,MAAMC,GAAG,GAAGH,OAAO,CAACA,OAAO;MAC3B,IAAI,CAACG,GAAG,EAAE;QACR,OAAOD,QAAQ,EAAE;MACnB;MAEA,IAAI,CAACF,OAAO,CAACI,IAAI,CAACC,UAAU,CAAC,IAAI,CAAC3B,cAAc,CAAC,EAAE;QACjD,OAAOwB,QAAQ,EAAE;MACnB;MAEA,MAAMI,YAAY,GAAG,mBAAmB,CAACC,IAAI,CAACJ,GAAG,CAAC;MAClD,IAAI,CAACG,YAAY,EAAE;QACjB,OAAOJ,QAAQ,EAAE;MACnB;;MAEA;MACA,MAAMM,GAAG,GAAG;QACV,GAAGR,OAAO;QACVI,IAAI,EAAEK;MACR,CAAC;MAED,OAAOd,QAAQ,CAACe,SAAS,CACvBd,MAAM,EACNY,GAAG,EACF,qEAAoE,EACrEP,cAAc,EACdC,QAAQ,CACT;IACH,CAAC,CACF;EACL;AACF;AAAC"}