{"version":3,"file":"types.js","names":[],"sources":["../../../src/utils/adapter/types.ts"],"sourcesContent":["import type reporter from \"gatsby-cli/lib/reporter\"\nimport type { TrailingSlash } from \"gatsby-page-utils\"\nimport type { IHeader, HttpStatusCode } from \"../../redux/types\"\n\nimport type {\n  ImageCdnUrlGeneratorFn,\n  ImageCdnSourceImage,\n  ImageCdnTransformArgs,\n  FileCdnUrlGeneratorFn,\n  FileCdnSourceImage,\n} from \"gatsby-plugin-utils/dist/polyfill-remote-file/types\"\n\nexport type {\n  ImageCdnUrlGeneratorFn,\n  ImageCdnSourceImage,\n  ImageCdnTransformArgs,\n  FileCdnUrlGeneratorFn,\n  FileCdnSourceImage,\n}\n\ninterface IBaseRoute {\n  /**\n   * Request path that should be matched for this route.\n   * It can be:\n   *  - static: `/about/`\n   *  - dynamic:\n   *    - parameterized: `/blog/:slug/`\n   *    - catch-all / wildcard: `/app/*`\n   */\n  path: string\n}\n\nexport interface IStaticRoute extends IBaseRoute {\n  type: `static`\n  /**\n   * Location of the file that should be served for this route.\n   */\n  filePath: string\n  /**\n   * HTTP headers that should be set for this route.\n   * @see http://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/headers/\n   */\n  headers: IHeader[\"headers\"]\n}\n\nexport interface IFunctionRoute extends IBaseRoute {\n  type: `function`\n  /**\n   * Unique identifier of this function. Corresponds to the `functionId` inside the `functionsManifest`.\n   * Some functions will be shared for multiple routes, e.g. SSR or DSG functions.\n   */\n  functionId: string\n  /**\n   * If `cache` is true, response of function should be cached for current deployment and served on subsequent requests for this route.\n   */\n  cache?: true\n}\n\n/**\n * Redirects are being created through the `createRedirect` action.\n * @see https://www.gatsbyjs.com/docs/reference/config-files/actions/#createRedirect\n */\nexport interface IRedirectRoute extends IBaseRoute {\n  type: `redirect`\n  /**\n   * The redirect should happen from `path` to `toPath`.\n   */\n  toPath: string\n  /**\n   * HTTP status code that should be used for this redirect.\n   */\n  status: HttpStatusCode\n  ignoreCase?: boolean\n  /**\n   * HTTP headers that should be used for this redirect.\n   * @see http://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/headers/\n   */\n  headers: IHeader[\"headers\"]\n  [key: string]: unknown\n}\n\nexport type Route = IStaticRoute | IFunctionRoute | IRedirectRoute\n\nexport type RoutesManifest = Array<Route>\n\nexport interface IHeaderRoute extends IBaseRoute {\n  headers: IHeader[\"headers\"]\n}\n\nexport type HeaderRoutes = Array<IHeaderRoute>\nexport interface IFunctionDefinition {\n  /**\n   * Unique identifier of this function. Corresponds to the `functionId` inside the `routesManifest`.\n   */\n  functionId: string\n  /**\n   * Unique name of this function. Use this as a display name for the function.\n   */\n  name: string\n  /**\n   * Path to function entrypoint that will be used to create function\n   */\n  pathToEntryPoint: string\n  /**\n   * List of all required files that this function needs to run\n   */\n  requiredFiles: Array<string>\n}\n\nexport type FunctionsManifest = Array<IFunctionDefinition>\n\ninterface IDefaultContext {\n  /**\n   * Reporter instance that can be used to log messages to terminal\n   * @see https://www.gatsbyjs.com/docs/reference/config-files/node-api-helpers/#reporter\n   */\n  reporter: typeof reporter\n}\n\nexport type RemoteFileAllowedUrls = Array<{\n  /**\n   * Allowed url in URLPattern format. In particular it uses wildcard `*` and param `:param` syntax.\n   */\n  urlPattern: string\n  /**\n   *Allowed url in regex source format\n   */\n  regexSource: string\n}>\n\nexport interface IAdaptContext extends IDefaultContext {\n  routesManifest: RoutesManifest\n  functionsManifest: FunctionsManifest\n  headerRoutes: HeaderRoutes\n  /**\n   * @see https://www.gatsbyjs.com/docs/reference/config-files/gatsby-config/#pathprefix\n   */\n  pathPrefix: string\n  /**\n   * @see https://www.gatsbyjs.com/docs/reference/config-files/gatsby-config/#trailingslash\n   */\n  trailingSlash: TrailingSlash\n  /**\n   * List of allowed remote file URLs represented in URLPattern and Regex formats.\n   * Allowed urls are provided by user or plugins using `addRemoteFileAllowedUrl` action.\n   * @see https://www.gatsbyjs.com/docs/reference/config-files/actions/#addRemoteFileAllowedUrl\n   */\n  remoteFileAllowedUrls: RemoteFileAllowedUrls\n}\n\nexport interface ICacheContext extends IDefaultContext {\n  directories: Array<string>\n}\n\nexport interface IAdapterConfig {\n  /**\n   * URL representing the unique URL for an individual deploy\n   */\n  deployURL?: string\n  /**\n   * If `true`, Gatsby will not include the LMDB datastore in the serverless functions used for SSR/DSG.\n   * Instead, it will try to download the datastore from the given `deployURL`.\n   */\n  excludeDatastoreFromEngineFunction?: boolean\n  /**\n   * Adapters can optionally describe which features they support to prevent potentially faulty deployments\n   */\n  supports?: {\n    /**\n     * If `false`, Gatsby will fail the build if user tries to use pathPrefix.\n     */\n    pathPrefix?: boolean\n    /**\n     * Provide array of supported traling slash options\n     * @example [`always`]\n     */\n    trailingSlash?: Array<TrailingSlash>\n  }\n  /**\n   * List of plugins that should be disabled when using this adapter. Purpose of this is to disable\n   * any potential plugins that serve similar role as adapter that would cause conflicts when both\n   * plugin and adapter is used at the same time.\n   */\n  pluginsToDisable?: Array<string>\n  /**\n   * Path to a CommonJS module that implements an image CDN URL generation function. The function\n   * is used to optimize image delivery by generating URLs that leverage CDN capabilities. This module\n   * should have a default export function that conforms to the {@link ImageCdnUrlGeneratorFn} type:\n   *\n   * Adapters should provide an absolute path to this module.\n   * See 'packages/gatsby-adapter-netlify/src/image-cdn-url-generator.ts' as an implementation\n   * example for the Netlify adapter.\n   */\n  imageCDNUrlGeneratorModulePath?: string\n  /**\n   * Path to a CommonJS module that implements an file CDN URL generation function. This module\n   * should have a default export function that conforms to the {@link FileCdnUrlGeneratorFn} type:\n   *\n   * Adapters should provide an absolute path to this module.\n   * See 'packages/gatsby-adapter-netlify/src/file-cdn-url-generator.ts' as an implementation\n   * example for the Netlify adapter.\n   */\n  fileCDNUrlGeneratorModulePath?: string\n  /**\n   * The platform bundled functions will execute on. Usually should be `linux`.\n   * This will be used if user didn't specify `GATSBY_FUNCTIONS_PLATFORM` environment variable\n   * or used `-functions-platform` CLI toggle. If none is defined current platform (process.platform) will be used.\n   */\n  functionsPlatform?: string\n  /**\n   * The architecture bundled functions will execute on. Usually should be `x64`.\n   * This will be used if user didn't specify `GATSBY_FUNCTIONS_ARCH` environment variable\n   * or used `-functions-arch` CLI toggle. If none is defined current arch (process.arch) will be used.\n   */\n  functionsArch?: string\n}\n\ntype WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] }\n\n/**\n * This is the internal version of \"IAdapterConfig\" to enforce that certain keys must be present.\n * Authors of adapters will only see \"IAdapterConfig\".\n */\nexport type IAdapterFinalConfig = WithRequired<\n  IAdapterConfig,\n  \"excludeDatastoreFromEngineFunction\" | \"pluginsToDisable\"\n>\n\nexport interface IAdapter {\n  /**\n   * Unique name of the adapter. Used to identify adapter in manifest.\n   */\n  name: string\n  cache?: {\n    /**\n     * Hook to restore `directories` from previous builds. This is executed very early on in the build process. If `false` is returned Gatsby will skip its cache restoration.\n     */\n    restore: (\n      context: ICacheContext\n    ) => Promise<boolean | void> | boolean | void\n    /**\n     * Hook to store `directories` for the current build. Executed as one of the last steps in the build process.\n     */\n    store: (context: ICacheContext) => Promise<void> | void\n  }\n  /**\n   * Hook to take Gatsby’s output and preparing it for deployment on the adapter’s platform. Executed as one of the last steps in the build process.\n   *\n   * The `adapt` hook should do the following things:\n   * - Apply HTTP headers to assets\n   * - Apply redirects and rewrites. The adapter should can also create its own redirects/rewrites if necessary (e.g. mapping serverless functions to internal URLs).\n   * - Wrap serverless functions coming from Gatsby with platform-specific code (if necessary). Gatsby will produce [Express-like](https://expressjs.com/) handlers.\n   * - Apply trailing slash behavior and path prefix to URLs\n   * - Possibly upload assets to CDN\n   *\n   * @see http://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/creating-an-adapter/\n   */\n  adapt: (context: IAdaptContext) => Promise<void> | void\n  /**\n   * Hook to pass information from the adapter to Gatsby. You must return an object with a predefined shape.\n   * Gatsby uses this information to adjust its build process. The information can be e.g. things that are only known once the project is deployed.\n   *\n   * This hook can enable advanced feature of adapters and it is not required to implement it.\n   *\n   * @see http://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/creating-an-adapter/\n   */\n  config?: (\n    context: IDefaultContext\n  ) => Promise<IAdapterConfig> | IAdapterConfig\n}\n\n/**\n * Adapter initialization function that returns an instance of the adapter.\n * @see http://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/creating-an-adapter/\n */\nexport type AdapterInit<T = Record<string, unknown>> = (\n  adapterOptions?: T\n) => IAdapter\n\nexport interface IAdapterManager {\n  restoreCache: () => Promise<void> | void\n  storeCache: () => Promise<void> | void\n  adapt: () => Promise<void> | void\n  config: () => Promise<IAdapterFinalConfig>\n}\n/**\n * Types for gatsby/adapters.js\n * @see http://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/zero-configuration-deployments/\n */\nexport interface IAdapterManifestEntry {\n  /**\n   * Name of the adapter\n   */\n  name: string\n  /**\n   * Test function to determine if adapter should be used\n   */\n  test: () => boolean\n  /**\n   * npm module name of the adapter\n   */\n  module: string\n  /**\n   * List of version pairs that are supported by the adapter.\n   * This allows to have multiple versions of the adapter for different versions of Gatsby.\n   * This is useful for when APIs change or bugs are fixed that require different implementations.\n   */\n  versions: Array<{\n    /**\n     * Version of the `gatsby` package. This is a semver range.\n     */\n    gatsbyVersion: string\n    /**\n     * Version of the adapter. This is a semver range.\n     */\n    moduleVersion: string\n    /**\n     * Can override the module defined in the parent manifest entry - useful for when the adapter is renamed.\n     */\n    module?: string\n  }>\n}\n"],"mappings":""}