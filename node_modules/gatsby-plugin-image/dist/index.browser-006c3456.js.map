{"version":3,"file":"index.browser-006c3456.js","sources":["../src/image-utils.ts","../src/components/hooks.ts","../src/components/layout-wrapper.tsx","../src/components/picture.tsx","../src/components/placeholder.tsx","../src/components/main-image.tsx","../src/components/gatsby-image.server.tsx","../src/components/gatsby-image.browser.tsx","../src/components/static-image.server.tsx","../src/components/static-image.tsx"],"sourcesContent":["import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent, PropsWithChildren } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<\n  PropsWithChildren<ILayoutWrapperProps>\n> = function LayoutWrapper({ children, ...props }) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {SERVER ? <NativeScriptLoading /> : null}\n    </Fragment>\n  )\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n  filename?: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n"],"names":["DEFAULT_PIXEL_DENSITIES","DEFAULT_BREAKPOINTS","DEFAULT_FIXED_WIDTH","DEFAULT_ASPECT_RATIO","warn","message","console","sortNumeric","a","b","getSizes","width","layout","images","map","image","src","join","formatFromFilename","filename","dot","lastIndexOf","ext","slice","length","setDefaultDimensions","args","height","sourceMetadata","breakpoints","aspectRatio","formats","format","toLowerCase","camelCase","_extends","Math","round","_generateImageSource","generateImageSource","fit","options","generateImageData","pluginName","reporter","backgroundColor","placeholderURL","_sourceMetadata","Set","size","has","delete","add","imageSizes","imgDimensions","Object","entries","filter","_","erroneousUserDimensions","dim","outputPixelDensities","dedupeAndSortDensities","calculated","getDimensionsAndAspectRatio","originalWidth","fixedDimension","sizes","densities","density","presentationWidth","presentationHeight","unscaledWidth","fixedImageSizes","responsiveImageSizes","calculateImageSizes","result","sources","forEach","imageSrc","Boolean","find","img","unscaled","fallback","srcSet","getSrcSet","_result$sources","push","type","imageProps","placeholder","values","Array","from","sort","min","DEFAULT_FLUID_WIDTH","includes","dimensions","imageAspectRatio","widthOption","Number","MAX_SAFE_INTEGER","heightOption","max","hasNativeLazyLoadSupport","HTMLImageElement","prototype","gatsbyImageIsInstalled","GATSBY___IMAGE","node","_node$childImageSharp","_node$images","_node$images$fallback","isGatsbyImageData","gatsbyImageData","isGatsbyImageDataParent","gatsbyImage","isGatsbyImageParent","childImageSharp","getSrc","getImage","_getImage$images","_getImage","_getImage$images$fall","_getImage2","_getImage2$images","_getImage2$images$fal","wrapperStyle","className","position","overflow","display","verticalAlign","style","getImageData","_ref","_breakpoints","baseUrl","urlBuilder","sourceWidth","sourceHeight","props","_objectWithoutPropertiesLoose","_excluded","EVERY_BREAKPOINT","getMainProps","isLoading","isLoaded","loading","left","top","transform","transition","willChange","shouldLoad","opacity","getPlaceholderProps","objectFit","objectPosition","bottom","right","withArtDirection","defaultImage","artDirected","output","_excluded2","_output$placeholder","media","process","env","NODE_ENV","source","Sizer","React","createElement","paddingTop","maxWidth","alt","role","LayoutWrapper","children","Fragment","Image","decoding","undefined","Picture","_ref2","key","fallbackImage","_Picture$propTypes","propTypes","PropTypes","string","isRequired","bool","displayName","exact","arrayOf","oneOfType","Placeholder","propName","componentName","Error","MainImage","removeNewLines","str","replace","altValidator","rest","object","renderImageToStringPromise","renderImage","GatsbyImageHydrator","as","class","preactClass","onStartLoad","onLoad","onError","getWrapperProps","wStyle","wClass","wrapperProps","root","useRef","useMemo","JSON","stringify","sizer","getSizer","useEffect","import","then","renderImageToString","swapPlaceholderImage","ssrImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","onLoadListener","imageCache","cacheKey","animationFrame","cleanupCallback","innerHTML","requestAnimationFrame","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","GatsbyImage","memo","_getStaticImage","StaticImage","__imageData","imageData","__error","imgClassName","imgStyle","placeholderBackgroundColor","cleanedImages","checkDimensionProps","number","validLayouts","GatsbyImageBrowser"],"mappings":"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"}