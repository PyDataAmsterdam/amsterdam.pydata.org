{"version":3,"file":"gatsby-image.module.js","sources":["../src/image-utils.ts","../src/components/hooks.ts","../src/components/placeholder.tsx","../src/components/picture.tsx","../src/components/main-image.tsx","../src/components/layout-wrapper.tsx","../src/components/gatsby-image.server.tsx","../src/components/static-image.server.tsx"],"sourcesContent":["import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React, { Fragment, FunctionComponent, PropsWithChildren } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<\n  PropsWithChildren<ILayoutWrapperProps>\n> = function LayoutWrapper({ children, ...props }) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {SERVER ? <NativeScriptLoading /> : null}\n    </Fragment>\n  )\n}\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n  filename?: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n"],"names":["DEFAULT_PIXEL_DENSITIES","DEFAULT_BREAKPOINTS","EVERY_BREAKPOINT","DEFAULT_FLUID_WIDTH","DEFAULT_FIXED_WIDTH","DEFAULT_ASPECT_RATIO","warn","message","sortNumeric","a","b","getSizes","width","layout","getSrcSet","images","map","image","src","join","formatFromFilename","filename","lastIndexOf","dot","ext","slice","length","setDefaultDimensions","args","_args$layout","height","sourceMetadata","breakpoints","aspectRatio","formats","_args$formats","format","toLowerCase","camelCase","Math","round","_extends","getLowResolutionImageURL","_generateImageSource","generateImageSource","fit","options","generateImageData","_sourceMetadata","pluginName","reporter","_args2$reporter","backgroundColor","placeholderURL","Error","Set","size","has","add","imageSizes","imgDimensions","_args$reporter","_args$breakpoints","erroneousUserDimensions","Object","entries","filter","_ref","_","dim","_ref2","_ref2$fit","outputPixelDensities","_ref2$reporter","densities","dedupeAndSortDensities","getDimensionsAndAspectRatio","calculated","originalWidth","fixedDimension","sizes","density","presentationWidth","presentationHeight","unscaledWidth","fixedImageSizes","responsiveImageSizes","calculateImageSizes","result","sources","forEach","imageSrc","Boolean","unscaled","find","img","fallback","srcSet","_result$sources","push","type","imageProps","placeholder","values","Array","from","sort","_ref3","_ref3$fit","_ref3$outputPixelDens","min","includes","dimensions","imageAspectRatio","widthOption","Number","MAX_SAFE_INTEGER","heightOption","_widthOption","max","gatsbyImageIsInstalled","GATSBY___IMAGE","getImage","node","_node$childImageSharp","_node$images$fallback","_node$images","isGatsbyImageData","gatsbyImageData","isGatsbyImageDataParent","gatsbyImage","isGatsbyImageParent","childImageSharp","getSrc","_getImage","_getImage$images","_getImage$images$fall","_getImage2$images","_getImage2","_getImage2$images$fal","getImageData","baseUrl","urlBuilder","sourceWidth","sourceHeight","_ref$formats","props","_objectWithoutPropertiesLoose","_excluded","_breakpoints","withArtDirection","defaultImage","artDirected","_output$images$source2","_output$placeholder","_output$placeholder$s","output","_excluded2","_output$images$source","media","process","env","NODE_ENV","console","source","concat","apply","_Picture$propTypes","loading","alt","_ref$alt","shouldLoad","React","createElement","decoding","undefined","Picture","_ref2$sources","_ref2$shouldLoad","Image","key","fallbackImage","propTypes","PropTypes","string","isRequired","bool","displayName","exact","arrayOf","oneOfType","Placeholder","propName","componentName","MainImage","Fragment","NativeScriptLoading","dangerouslySetInnerHTML","__html","Sizer","style","paddingTop","maxWidth","display","role","position","LayoutWrapper","children","removeNewLines","str","replace","GatsbyImage","as","className","preactClass","_ref$loading","imgClassName","imgStyle","objectFit","objectPosition","placeholderBackgroundColor","wrapperStyle","overflow","verticalAlign","getWrapperProps","wStyle","_getWrapperProps","wClass","wrapperProps","cleanedImages","getPlaceholderProps","isLoaded","top","left","bottom","right","opacity","transition","isLoading","transform","willChange","getMainProps","StaticImage","imageData","__imageData","__error","_getStaticImage","GatsbyImageServer","checkDimensionProps","number","validLayouts","call","arguments"],"mappings":"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"}